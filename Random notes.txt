FUN_08031708(param_1): Sets something in memory to param_1

0x0803a1cc: Draws dialogue box. Set to b 0803a1d8 to skip dialogue boxes.
0x0803a1f2: Set to b 0803a1f6 to skip waiting for button press?

0x0803a0dc: Set to b 0803a22c to skip search box?
0x0803a21c: How long Searching box lasts. (Default: cmp r0, 40)

0x0803a6c0: Set to b 0803a6c4 tp skip waiting for button press after items received

loop condition:
 switch uvar9:
	case 0:
		setup variables
		uvar9 = 1
	case 1:
		Draw dialogue box (slide-in, then 1 letter per call)
		if done:
			uvar9 = 4
	case 4:
		Waiting for button press?
		After some loops:
			uvar9 = 6
	case 5:
		????
		uvar9 = 8
	case 6:
		Draw "Searching" box
		???:
			uvar9 = 5
	case 7:
		????
		
	case 8:
		Write item name
		uvar9 = 9
	case 9:
		Wait for button press?
	case A:
		Give items?
		uvar9 = D
	case B:
		???
		uvar9 = C
	case C:
		Show "Too many items" box
		uvar9 = C
	case D:
		uvar9 = 1

_______________________________________________________________________________________________________________________


02002025 = bitflags?: (0x01 Card shop), (0x20 set on first visit)
02001fb0 = bitflags: (0x80 card list in clan menu)

If bitflags toggled outside combat shop is empty. Law cards restock after battle?


08525fbd

_______________________________________________________________________________________________________________________

0806ed88: stores 0 at 020273d3

02027b57

02001940: Current inventory

02000080: List of item ids (for what?)

02002cc0 + 1 = 3 (and with r0) (1st territory data?)

Item data + 0c = bitflags (10 = shop level 0, 20 = shop level 1, 40 = shop level 2, 08 = turf discount)

02027460: Shop item list


08b40a32 = Increment item id (getting shop items)


080ced00: counting freed territories?

080cca14: Loading item from unlock list

080cbf1c: returns to here with freed territories in r0 and shop list next item in r4

080ccd0c + x = pointer to City-specific item instructions

08528A44: Items unlocked by territory (Cyril)
08528AA4: Items unlocked by territory (Sprohm)
08528B04: Items unlocked by territory (Muscadet)
08528B64: Items unlocked by territory (Cadoan)
08528BC4: Items unlocked by territory (Baguba Port)

item list: 0851d180


"Shop Unlock" = 80C2 80D1 80D8 80D9 4073 80C4 80D7 80D5 80D8 80CC 80D4 
	(\x80\xc2\x80\xd1\x80\xd8\x80\xd9@s\x80\xc4\x80\xd7\x80\xd5\x80\xd8\x80\xcc\x80\xd4\x00)

"Shop Upgrade" = 80C2 80D1 80D8 80D9 4073 80C4 80D9 80D0 80DB 80CA 80CD 80CE
	(\x80\xc2\x80\xd1\x80\xd8\x80\xd9@s\x80\xc4\x80\xd9\x80\xd0\x80\xdb\x80\xca\x80\xcd\x80\xce\x00)

"Job Unlock" at 08525aea (ea5a5208)
pointer at: 08526f5c

Leonarth shop:
	end: 08b40a36
	
	
used: 0 1 3 4 5 7 9

free: 2 6 are not used

_______________________________________________________________________________________________________________________

def get_item_data(ffta_data, rom):
	bitmask = 0x70
	tiers = {0x00: 0, 0x70: 1, 0x60: 2, 0x40: 3}
	
	item_data = []
	for item in ffta_data.items:
		next_address = item.memory + worlds.ffta.data.ItemOffsets.buy_price
		buy_price = rom[next_address:next_address+2]
		buy_price = int.from_bytes(buy_price, "little")
		
		next_address = item.memory + worlds.ffta.data.ItemOffsets.sell_price
		sell_price = rom[next_address:next_address+2]
		sell_price = int.from_bytes(sell_price, "little")
		
		next_address = item.memory + worlds.ffta.data.ItemOffsets.item_flags
		item_flags = rom[next_address]
		
		
		item_tier = tiers[item_flags & bitmask]
		item_data.append((buy_price, sell_price, item_tier))
	return item_data


def get_item_flags(ffta_data, rom):
	item_data = []
	for item in ffta_data.items:
		next_address = item.memory + worlds.ffta.data.ItemOffsets.item_flags
		item_flags = rom[next_address]
		item_data.append(item_flags)
	return item_data
	
for index, item in enumerate(a):
	if item[0] != 0:
		if flags[index] & 0x08 == 0:
			print(index)

for index, item in enumerate(a):
	if item[0] != 0 and item[0] != item[1]*2:
		print(index)


price_lines = []
for index, data in enumerate(inferred_prices):
	item = ffta_data.items[index]
	
	buy_address = item.memory + worlds.ffta.data.ItemOffsets.buy_price
	buy_address = struct.pack('>L', buy_address).hex()
	#buy_price = struct.pack('>H', data[0]).hex()
	buy_price = data[0]
	price_lines.append(f"ORG 0x{buy_address}; ")
	price_lines.append(f"SHORT {buy_price}; ")
	
	sell_address = item.memory + worlds.ffta.data.ItemOffsets.sell_price
	sell_address = struct.pack('>L', sell_address).hex()
	#sell_price = struct.pack('>H', data[1]).hex()
	sell_price = data[1]
	#price_lines.append(f"ORG 0x{sell_address}; ")
	price_lines.append(f"SHORT {sell_price}\n")
	
	
	
tier_lines = []
for index, data in enumerate(inferred_prices):
	tier_lines.append(f"BYTE 0x0{data[2]}\n")